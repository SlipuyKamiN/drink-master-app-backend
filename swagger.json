{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.2",
    "title": "Swagger",
    "description": "Showing off swagger-ui-express",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [{ "url": "https://drink-master.onrender.com/api" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Subscribe",
      "description": "Subscription endpoints"
    },
    {
      "name": "Recipes"
    },
    {
      "name": "Glass"
    },
    {
      "name": "MyRecipes",
      "description": "MyRecipes endpoints"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User is logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {}
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "The token issued to the current user."
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "The user is logged out",
            "content": {}
          },
          "401": {
            "description": "Missing header with authorization token.",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/auth/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Info about current user",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "The token issued to the current user."
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Information found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token.",
            "content": {}
          }
        }
      }
    },
    "/auth/user": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Update User info",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "The token issued to the current user."
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User data",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "User update failed",
            "content": {}
          },
          "401": {
            "description": "Missing header with authorization token",
            "content": {}
          }
        }
      }
    },
    "/subscribe": {
      "post": {
        "tags": ["Subscribe"],
        "summary": "User subscription",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Subscription object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful subscription"
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    },
    "/recipes/category-list": {
      "get": {
        "tags": ["Recipes"],
        "summary": "Get recipes category-list",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "The token issued to the current user."
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Category-list found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipesCategoriesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token"
          }
        }
      }
    },
    "/glass": {
      "get": {
        "tags": ["Glass"],
        "summary": "Get glass list",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "The token issued to the current user."
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "Glass-list found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlassCategoriesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token"
          }
        }
      }
    },
    "/myrecipes": {
      "post": {
        "tags": ["MyRecipes"],
        "summary": "Add user's recipe",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "The token issued to the current user."
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's recipe object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddUserRecipeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recipe is added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserRecipeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token"
          },
          "404": {
            "description": "Wrong ingredient title"
          }
        }
      },
      "get": {
        "tags": ["MyRecipes"],
        "summary": "Get user's drink",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "The token issued to the current user"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "User's drinks were found"
          },
          "401": {
            "description": "Missing header with authorization token"
          }
        }
      }
    },
    "/myrecipes/{drinkId}": {
      "delete": {
        "tags": ["MyRecipes"],
        "summary": "Delete user's drink",
        "parameters": [
          {
            "in": "path",
            "name": "drinkId",
            "required": true,
            "description": "ID of drink"
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "The token issued to the current user"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Drink has been deleted"
          },
          "401": {
            "description": "Missing header with authorization token"
          },
          "404": {
            "description": "Drink with such id was not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty123"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        },
        "example": { "name": "Alex", "email": "user@gmail.com" }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's id",
            "example": "64ecb56e7c83b02f5b79709d"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar link",
            "example": "//www.gravatar.com/avatar/d9e6b34c905e346796a4d1eda209400e"
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZWNiNTZlN2M4M2IwMmY1Yjc5NzA5ZCIsImlhdCI6MTY5MzIzNTM0MSwiZXhwIjoxNjkzMzE4MTQxfQ.QarylEOCqImrtibxJRXtxOWIJDecBvUVfLy6mAvlrPQ"
          }
        },
        "example": {
          "_id": "64ecb56e7c83b02f5b79709d",
          "name": "Alex",
          "email": "user@gmail.com",
          "avatarURL": "//www.gravatar.com/avatar/d9e6b34c905e346796a4d1eda209400e",
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZWNiNTZlN2M4M2IwMmY1Yjc5NzA5ZCIsImlhdCI6MTY5MzIzNTM0MSwiZXhwIjoxNjkzMzE4MTQxfQ.QarylEOCqImrtibxJRXtxOWIJDecBvUVfLy6mAvlrPQ"
        }
      },
      "CurrentResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alex"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar link",
            "example": "//www.gravatar.com/avatar/d9e6b34c905e346796a4d1eda209400e"
          }
        },
        "example": {
          "email": "user@gmail.com",
          "name": "Alex",
          "avatarURL": "//www.gravatar.com/avatar/d9e6b34c905e346796a4d1eda209400e"
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "required": ["name", "avatar"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alex"
          },
          "avatar": {
            "type": "string",
            "description": "User's avatar",
            "format": "binary"
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alex"
          },
          "avatar": {
            "type": "string",
            "description": "User's avatar",
            "example": "https://res.cloudinary.com/dbvxfxxjv/image/upload/v1693150358/avatars/kisspng-react-javascript-responsive-web-design-github-angu-github-5accac250cda95.4452823815233628530527.png.png"
          }
        },
        "example": {
          "name": "Alex",
          "avatarURL": "https://res.cloudinary.com/dbvxfxxjv/image/upload/v1693150358/avatars/kisspng-react-javascript-responsive-web-design-github-angu-github-5accac250cda95.4452823815233628530527.png.png"
        }
      },
      "SubscribeRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "RecipesCategoriesResponse": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": ["Beer", "Cocktail"]
      },
      "GlassCategoriesResponse": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": ["Balloon Glass", "Beer Glass", "Beer mug"]
      },
      "AddUserRecipeRequest": {
        "type": "object",
        "required": [
          "drink",
          "category",
          "glass",
          "instructions",
          "ingredients",
          "recipe"
        ],
        "properties": {
          "drink": {
            "type": "string",
            "description": "Drink name"
          },
          "description": {
            "type": "string",
            "description": "Drink description"
          },
          "category": {
            "type": "string",
            "description": "Drink category"
          },
          "glass": {
            "type": "string",
            "description": "Type of glass for drink"
          },
          "instructions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Instructions for drink preparation"
          },
          "ingredients": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Drink ingredient's title"
                },
                "measure": {
                  "type": "string",
                  "description": "Drink ingredient's measure"
                }
              },
              "description": "Drink ingredients"
            }
          },
          "recipe": {
            "type": "string",
            "description": "Drink's photo",
            "format": "binary"
          }
        },
        "example": {
          "drink": "Quentin",
          "description": "some description",
          "category": "Ordinary Drink",
          "glass": "Cocktail glass",
          "instructions": [
            "In a shaker half-filled with ice cubes, combine the rum, Kahlua, and cream. Shake well.",
            "Strain into a cocktail glass and garnish with the nutmeg."
          ],
          "ingredients": [
            {
              "title": "Light rum",
              "measure": "2 oz"
            },
            {
              "title": "Applejack",
              "measure": "2 oz"
            }
          ],
          "recipe": "file"
        }
      },
      "AddUserRecipeResponse": {
        "type": "object",
        "properties": {
          "drink": {
            "type": "string",
            "description": "Drink name"
          },
          "description": {
            "type": "string",
            "description": "Drink description"
          },
          "category": {
            "type": "string",
            "description": "Drink category"
          },
          "glass": {
            "type": "string",
            "description": "Type of glass for drink"
          },
          "instructions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Instructions for drink preparation"
          },
          "ingredients": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Drink ingredient's title"
                },
                "measure": {
                  "type": "string",
                  "description": "Drink ingredient's measure"
                },
                "ingredientThumb": {
                  "type": "string",
                  "description": "Drink ingredient's photo"
                },
                "thumbMedium": {
                  "type": "string",
                  "description": "Drink ingredient's medium photo"
                },
                "thumbSmall": {
                  "type": "string",
                  "description": "Drink ingredient's small photo"
                }
              },
              "description": "Drink ingredients"
            }
          },
          "drinkThumb": {
            "type": "string",
            "description": "Drink's photo"
          },
          "owner": {
            "type": "string",
            "description": "User's id"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of users who have chosen the drink as 'favourite'"
          },
          "_id": {
            "type": "string",
            "description": "Drink's id"
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Apdate date"
          }
        },
        "example": {
          "drink": "Quentin",
          "description": "some description",
          "category": "Ordinary Drink",
          "glass": "Cocktail glass",
          "instructions": [
            "In a shaker half-filled with ice cubes, combine the rum, Kahlua, and cream. Shake well.",
            "Strain into a cocktail glass and garnish with the nutmeg."
          ],
          "ingredients": [
            {
              "title": "Light rum",
              "measure": "2 oz",
              "ingredientThumb": "http://res.cloudinary.com/dec1shvoo/image/upload/v1689169605/cocktails-v1/ingredient/Light%20rum.png",
              "thumbMedium": "http://res.cloudinary.com/dec1shvoo/image/upload/v1689169605/cocktails-v1/ingredient/Light%20rum-Medium.png",
              "thumbSmall": "http://res.cloudinary.com/dec1shvoo/image/upload/v1689169605/cocktails-v1/ingredient/Light%20rum-Small.png"
            }
          ],
          "drinkThumb": "https://res.cloudinary.com/dbvxfxxjv/image/upload/v1693040839/recipes/334.png.png",
          "owner": "64edc0f832fca2355fc5b795",
          "users": [],
          "_id": "64ef15d88feb311711387228",
          "createdAt": "2023-08-30T10:11:36.357Z",
          "updatedAt": "2023-08-30T10:11:36.357Z"
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
